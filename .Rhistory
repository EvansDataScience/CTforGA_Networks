mapCrimeYears
# clean memory
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map_allTop4.geojson")
library(ggplot2)
base=ggplot(data=PointLocations) + theme_void()
aMap=base + geom_sf(aes(color=MCPP),size=1, alpha=0.2)
aMap=aMap+facet_grid(crimeMini~year)
#labs
textTitle="Crime events in Seattle by year and type"
textCapt="Source: Seattle Open Data Portal\nand Seattle Police Department."
aMap=aMap + labs(title = textTitle,
subtitle = "Showing the Top 4 Neighborhoods",
caption=textCapt)
#alpha for legend symbols
aMap= aMap + guides(colour = guide_legend(override.aes = list(alpha = 1)))
# adjusting legend, title and subtitle :
mapCrimeYears= aMap +
theme(plot.title = element_text(vjust = 3,hjust=0.5), #reposition
plot.subtitle = element_text(vjust = 4,hjust = 0.5),#reposition
legend.position=c(-0.7,0.3),#reposition
legend.spacing.x = unit(0,units = 'cm'),
legend.text = element_text(size=6)) +
## facet labels
theme(strip.text.x = element_text(size = 5),
strip.text.y = element_text(size = 5,
angle = -90))
mapCrimeYears
save(mapCrimeYears, file = "mapCrimeYears.rdata")
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears)%>%
layout(
legend = list(
orientation = 'v', x = -0.3, y = 0.5
)
)
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(
plot.margin = margin(1, 1, 2, 2, "cm"))%>%
layout(
legend = list(
orientation = 'v', x = -0.3, y = 0.5
)
)
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(
plot.margin = margin(1, 1, 2, 2, "cm")))%>%
layout(
legend = list(
orientation = 'v', x = -0.3, y = 0.5
)
)
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(2, "lines"),
plot.margin = margin(1, 1, 2, 2, "cm")))%>%
layout(
legend = list(
orientation = 'v', x = -0.3, y = 0.5
)
)
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines"),
plot.margin = margin(1, 1, 2, 2, "cm")))%>%
layout(
legend = list(
orientation = 'v', x = -0.3, y = 0.5
)
)
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines")))%>%
layout(
legend = list(
orientation = 'v', x = 0, y = 0.5
)
)
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines")))
# clean memory
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map_allTop4.geojson")
library(ggplot2)
base=ggplot(data=PointLocations) + theme_void()
aMap=base + geom_sf(aes(color=MCPP),size=1, alpha=0.2)
aMap=aMap+facet_grid(crimeMini~year)
#labs
textTitle="Crime events in Seattle by year and type"
textCapt="Source: Seattle Open Data Portal\nand Seattle Police Department."
aMap=aMap + labs(title = textTitle,
subtitle = "Showing the Top 4 Neighborhoods",
caption=textCapt)
#alpha for legend symbols
aMap= aMap + guides(colour = guide_legend(override.aes = list(alpha = 1)))
# adjusting legend, title and subtitle :
mapCrimeYears= aMap +
theme(plot.title = element_text(vjust = 3,hjust=0.5), #reposition
plot.subtitle = element_text(vjust = 4,hjust = 0.5),#reposition
legend.position=c(-0.7,0.3),#reposition
legend.spacing.x = unit(0,units = 'cm'),
legend.text = element_text(size=6)) +
## facet labels
theme(strip.text.x = element_text(size = 5),
strip.text.y = element_text(size = 5,
angle = -90))
mapCrimeYears
aMap
save(aMap, file = "mapCrimeYears.rdata")
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines")))
# clean memory
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map_allTop4.geojson")
library(ggplot2)
base=ggplot(data=PointLocations) + theme_void()
aMap=base + geom_sf(aes(color=MCPP),size=1, alpha=0.2)
aMap=aMap+facet_grid(crimeMini~year)
#labs
textTitle="Crime events in Seattle by year and type"
textCapt="Source: Seattle Open Data Portal\nand Seattle Police Department."
aMap=aMap + labs(title = textTitle,
subtitle = "Showing the Top 4 Neighborhoods",
caption=textCapt)
#alpha for legend symbols
aMap2= aMap + guides(colour = guide_legend(override.aes = list(alpha = 1)))
# adjusting legend, title and subtitle :
mapCrimeYears= aMap2 +
theme(plot.title = element_text(vjust = 3,hjust=0.5), #reposition
plot.subtitle = element_text(vjust = 4,hjust = 0.5),#reposition
legend.position=c(-0.7,0.3),#reposition
legend.spacing.x = unit(0,units = 'cm'),
legend.text = element_text(size=6)) +
## facet labels
theme(strip.text.x = element_text(size = 5),
strip.text.y = element_text(size = 5,
angle = -90))
mapCrimeYears
save(aMap, file = "mapCrimeYears.rdata")
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines")))
aMap
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines")))
save(aMap, file = "mapCrimeYears.rdata")
load("mapCrimeYears.rdata")
ggplotly(mapCrimeYears +
theme(panel.spacing = unit(0, "lines")))
save(aMap, file = "aMap.rdata")
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines")))
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines"),
strip.text.y = element_text(angle = -90)))
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines"),
legend.position=c(-0.7,0.3),
strip.text.y = element_text(angle = -90)))
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines"),
legend.position='left',
strip.text.y = element_text(angle = -90)))
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines"),
legend.position='left',
strip.text.y = element_text(angle = -90)))%>%
layout(legend = list(orientation = "h", x = -0.5, y =0.5))
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines"),
legend.position='left',
strip.text.y = element_text(angle = -90)))%>%
layout(legend = list(orientation = "v", x = -0.5, y =0.5))
load("aMap.rdata")
ggplotly(aMap +
theme(panel.spacing = unit(0, "lines"),
legend.position='left',
strip.text.y = element_text(angle = -90)))%>%
layout(legend = list(orientation = "v", x = -0.3, y =0.5))
# clean memory
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map_allTop4.geojson")
library(ggplot2)
base=ggplot(data=PointLocations) + theme_void()
aMap=base + geom_sf(aes(color=MCPP),size=1, alpha=0.2)
aMap=aMap+facet_grid(crimeMini~year)
#labs
textTitle="Crime events in Seattle by year and type"
textCapt="Source: Seattle Open Data Portal\nand Seattle Police Department."
aMap=aMap + labs(title = textTitle,
subtitle = "Showing the Top 4 Neighborhoods",
caption=textCapt)
aMap=aMap + theme(strip.text.y = element_text(angle = -90))
save(aMap, file = "aMap.rdata")
load("aMap.rdata")
ggplotly(aMap  +
theme(panel.spacing = unit(0, "lines"),
))%>%
layout(legend = list(orientation = "v", x = -0.2, y =0.5))
# clean memory
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map_allTop4.geojson")
library(ggplot2)
base=ggplot(data=PointLocations) + theme_void()
aMap=base + geom_sf(aes(color=MCPP),size=1, alpha=0.2)
aMap=aMap+facet_grid(crimeMini~year)
#labs
textTitle="Crime events in Seattle by year and type"
textCapt="Source: Seattle Open Data Portal\nand Seattle Police Department."
aMap=aMap + labs(title = textTitle,
subtitle = "Showing the Top 4 Neighborhoods",
caption=textCapt)
aMap=aMap + theme(strip.text.y = element_text(angle = -90))
aMap
# clean memory
rm(list = ls())
library(sf)
PointLocations=read_sf("crimes_dot_map_allTop4.geojson")
library(ggplot2)
base=ggplot(data=PointLocations) + theme_void()
aMap=base + geom_sf(aes(color=MCPP),size=1, alpha=0.2)
aMap=aMap+facet_grid(crimeMini~year)
#labs
textTitle="Crime events in Seattle by year and type"
textCapt="Source: Seattle Open Data Portal\nand Seattle Police Department."
aMap=aMap + labs(title = textTitle,
subtitle = "Showing the Top 4 Neighborhoods",
caption=textCapt)
mapCrimeYears=aMap + theme(strip.text.y = element_text(angle = -90))
#alpha for legend symbols
hereMap= mapCrimeYears +
guides(colour = guide_legend(override.aes =
list(alpha = 1)))
# reposition title and subtitle :
hereMap= hereMap +
theme(plot.title = element_text(vjust = 3,hjust=0.5),
plot.subtitle = element_text(vjust = 4,hjust = 0.5))
# reposition legend, and more
hereMap= hereMap + theme(
legend.position=c(-0.7,0.3),
#space between text and symbol in legend
legend.spacing.x = unit(0,units = 'cm'),
legend.text = element_text(size=6)) #text size
hereMap
rm(list = ls())
allIN=read.csv('allIN.csv')
library(ggrepel)
base=ggplot(allIN,aes(x=dim1,y=dim2,
label = city)) + theme_void()
base + geom_text(size=1.5)
base + geom_text(aes(color=as.factor(cluster)),size=1.5)
# clean memory
rm(list = ls())
allIN=read.csv('allIN.csv')
library(ggrepel)
base=ggplot(allIN,aes(x=dim1,y=dim2,
label = city)) + theme_void()
#labs
textCaption="Source:The Economist\nNote: Clustering process followed k-medoids technique."
textLegend="Clusters\n(labels do not\nrepresent order)"
ps=base + labs(title = "Safety of cities",
subtitle = "Scores on interventions (2023)",
caption=textCaption,
color=textLegend)
PointCitiesCluster=ps + geom_text(aes(color=as.factor(cluster)),
size=1.5)
pointsHere=ps + geom_point(aes(color=as.factor(cluster)))
pointsHere=pointsHere + geom_text_repel(size=1.5,
max.overlaps = 20)
pointsHere=pointsHere + theme(legend.background = element_rect(color='grey90'),
legend.title = element_text(size = 6,hjust = 0),
legend.position=c(0.2,0.05),
legend.direction = "horizontal")
pointsHere
PointCitiesCluster
save(PointCitiesCluster, file = "PointCitiesCluster.rdata")
library(gMOIP)
install.packages("gMOIP")
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
)
library(gMOIP)
A <- matrix(c(-3,2,2,4,9,10), ncol = 2, byrow = TRUE)
b <- c(3,27,90)
obj <- c(7.75, 10)  # coefficients c
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
)
library(gMOIP)
A <- matrix(c(1,-2,0,1,1,0), ncol = 2, byrow = TRUE)
b <- c(0,3000000,6400000)
obj <- c(1.9, 1.5)  # coefficients c
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
)
library(gMOIP)
A <- matrix(c(1,-2,0,1,1,0), ncol = 2, byrow = TRUE)
b <- c(0,3000000,6400000)
obj <- c(1.9, 1.5)  # coefficients c
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
)
library(gMOIP)
A <- matrix(c(0,1,1,0), ncol = 2, byrow = TRUE)
b <- c(3000000,6400000)
obj <- c(1.9, 1.5)  # coefficients c
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
)
library(gMOIP)
A <- matrix(c(-1,2,0,-1,1,0), ncol = 2, byrow = TRUE)
b <- c(0,-3000000,6400000)
obj <- c(1.9, 1.5)  # coefficients c
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
)
?plotPolytope
source("~/.active-rstudio-document", echo=TRUE)
OBJ_Coeff <- c(1.9, 1.5)  # coefficients c
ST_Coeff <- matrix(c(-1,2, # reverse for <=
0,-1, # reverse for <=
1,0),
ncol = 2,
byrow = TRUE)
RHS <- c(0,# reverse for <=
-3000000,# reverse for <=
6400000)
rep("c", ncol(ST_Coeff))
rep("c", ncol(ST_Coeff))
library(gMOIP)
plotPolytope(A=ST_Coeff,b=RHS,obj=OBJ_Coeff,
nonneg = rep(TRUE, ncol(A)),
type = rep("c", ncol(ST_Coeff)),
faces = rep("c", ncol(ST_Coeff)),
crit = "max",labels = "coord",
plotOptimum = TRUE)
library(gMOIP)
plotPolytope(A=ST_Coeff,b=RHS,obj=OBJ_Coeff,
nonneg = rep(TRUE, ncol(A)),
type = rep("c", ncol(ST_Coeff)),
faces = rep("c", ncol(ST_Coeff)),
crit = "max",labels = "coord",
plotOptimum = TRUE) +
ggplot2::labs(x="GAS",y="OIL")
library(gMOIP)
plotPolytope(A=ST_Coeff,b=RHS,obj=OBJ_Coeff,
nonneg = rep(TRUE, ncol(A)),
type = rep("c", ncol(ST_Coeff)),
faces = rep("c", ncol(ST_Coeff)),
crit = "max",labels = "coord",
plotOptimum = F) +
ggplot2::labs(x="GAS",y="OIL")
#----
library(gMOIP)
plotPolytope(A=ST_Coeff,b=RHS,obj=OBJ_Coeff,
nonneg = rep(TRUE, ncol(A)),
type = rep("c", ncol(ST_Coeff)),
faces = rep("c", ncol(ST_Coeff)),
crit = "max",labels = "coord",
plotOptimum = FALSE) +
ggplot2::labs(x="GAS",y="OIL")
library(gMOIP)
plotPolytope(A=ST_Coeff,b=RHS,obj=OBJ_Coeff,
nonneg = rep(TRUE, ncol(A)),
type = rep("c", ncol(ST_Coeff)),
faces = rep("c", ncol(ST_Coeff)),
crit = "max",labels = "coord",
plotOptimum = TRUE) +
ggplot2::labs(x="GAS",y="OIL")
# opening excel
library(rio)
linkAdjMx='https://github.com/EvansDataScience/CTforGA_Networks/raw/main/dataFigueroa.xlsx'
adjacency=import(linkAdjMx,which = 1)
# opening excel
library(rio)
linkAdjMx='https://github.com/EvansDataScience/CTforGA_Networks/raw/main/dataFigueroa.xlsx'
adjacency=import(linkAdjMx,which = 1)
View(adjacency)
dim(adjacency)
head(adjacency)
row.names(adjacency)=adjacency$Names
adjacency$Names=NULL
# then
head(adjacency)
adjacency=as.matrix(adjacency) # This coerces the object into a matrix, just in case
library(igraph)
EliteNet=graph.adjacency(adjacency,mode="undirected",weighted=NULL)
# see it here
EliteNet
write.graph(EliteNet,"EliteNet.csv",format = "edgelist")
EliteNet
?write.graph
get.edgelist(EliteNet)
as.data.frame(get.edgelist(EliteNet))
EliteNet_edges=as.data.frame(get.edgelist(EliteNet))
names(EliteNet_edges)=c('start','end')
EliteNet_edges
write.csv(EliteNet_edges,"EliteNet_edges.csv")
write.csv(EliteNet_edges,"EliteNet_edges.csv",row.names = F)
dd <- read.csv("EliteNet_edges.csv")
gg <- graph.data.frame(dd, directed=FALSE)
plot(gg)
vcount(EliteNet) #count of nodes
vcount(gg) #count of nodes
vcount(EliteNet) #count of nodes
ecount(EliteNet) #count of edges
ecount(gg) #count of edges
ecount(gg) #count of edges
vcount(EliteNet) #count of nodes
plot.igraph(EliteNet,
vertex.color = 'yellow',
edge.color='lightblue')
View(EliteNet_edges)
View(EliteNet)
View(adjacency)
?get.edgelist
vcount(EliteNet) #count of nodes
vcount(gg) #count of nodes
EliteNet_edges=as.data.frame(as_edgelist(EliteNet))
EliteNet_edges
names(EliteNet_edges)=c('start','end')
write.csv(EliteNet_edges,"EliteNet_edges.csv",row.names = F)
dd <- read.csv("EliteNet_edges.csv")
gg <- graph.data.frame(dd, directed=FALSE)
vcount(EliteNet) #count of nodes
vcount(gg) #count of nodes
?graph.data.frame
install.packages("igraph")
library(MASS)
write.matrix(adjacency,file="EliteAdj.csv")
setwd("~/Documents/Evans/CTforGA/CTforGA_Networks")
write.matrix(adjacency,file="EliteAdj.csv")
?write.matrix
write.matrix(adjacency,file="EliteAdj.txt")
Initial.matrix <- read.csv("EliteAdj.csv", header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
Initial.matrix <- read.csv("EliteAdj.csv", header=TRUE, check.names=FALSE, na.strings = "")
View(Initial.matrix)
adjacency=read.txt("net.adjlist")
read.table("net.adjlist")
View(Initial.matrix)
where=file.path('data',"EliteNetR.graphml")
write_graph(EliteNet,where, "graphml")
